{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-27T15:17:03.082200Z",
     "start_time": "2019-08-27T15:17:03.071200Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example we study a typical circuit QED system consisting of a transmon qubit coupled to a resonator. The first step is to import the objects we will be needing from qucat."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-27T15:17:05.168200Z",
     "start_time": "2019-08-27T15:17:05.155200Z"
    }
   },
   "outputs": [],
   "source": [
    "from qucat import Network,GUI,L,J,C,R"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One should then create a circuit. These are named `Qcircuit`, short for \"Quantum circuit\". There are two ways of creating a `Qcircuit`: using the graphical user interface (GUI), or programmatically."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T07:50:26.465400Z",
     "start_time": "2019-05-01T07:50:26.445400Z"
    }
   },
   "source": [
    "## Building the circuit programmatically\n",
    "\n",
    "This is done with circuit components created with the functions ``R``, ``L``, ``C``, ``J`` for resistors, inductors, capacitors and junctions respectively.\n",
    "All circuit components take as first two argument integers referring to the negative and positive node of the circuit components.\n",
    "The third argument is either a float giving the component a value, and/or a string which labels the component parameter to be specified later.\n",
    "Doing the latter avoids performing the computationally expensive initialization of the circuit multiple times when sweeping a parameter.\n",
    "\n",
    "For example, this code creates a resistor, with negative node 0, and positive node 1, with a resistance we label `R_1`, and a resistance value of 1 M$\\Omega$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-27T13:14:28.413000Z",
     "start_time": "2019-08-27T13:14:28.410000Z"
    }
   },
   "outputs": [],
   "source": [
    "resistor = R(0,1,1e6,'R_1')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To create a `Qcircuit`, we should pass a list of such components to the `qucat` function `Network`.\n",
    "The following code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-27T13:14:32.481000Z",
     "start_time": "2019-08-27T13:14:32.316000Z"
    }
   },
   "outputs": [],
   "source": [
    "cir_prog = Network([\n",
    "C(0,1,100e-15), # transmon\n",
    "J(0,1,'Lj'),\n",
    "C(0,2,100e-15), # resonator\n",
    "L(0,2,10e-9),\n",
    "C(1,2,1e-15), # coupling capacitor\n",
    "C(2,3,0.5e-15), # ext. coupl. cap.\n",
    "R(3,0,50)]) # 50 Ohm load"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "implements the circuit below, where we have indexed the nodes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![alt text](graphics/basic_circuit.png \"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we have not specified a value for $L_j$, we have to specify it as a keyword in all subsequent functions. This is the most computationally efficient way to perform a parameter sweep.\n",
    "\n",
    "By default, **junctions are parametrized by their Josephson inductance** $L_j = \\phi_0^2/E_j$\n",
    "where $\\phi_0 = \\hbar/2e$ is the reduced flux quantum, $\\hbar$ Plancks reduced constant and $e$ the electron charge.\n",
    "and $E_j$ (in Joules) is the Josephson energy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Building a circuit with the GUI"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, we can open the GUI to create the circuit through the following code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-27T15:17:40.470200Z",
     "start_time": "2019-08-27T15:17:10.916200Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 452.698x177.48 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C 1 2 C_c=1 fF\n",
      "C 0 1 100 fF\n",
      "J 0 1 Lj\n",
      "C 0 2 100 fF\n",
      "L 0 2 10 nH\n",
      "R 0 2 1 MOhm\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cir = GUI('circuits/basics.txt', # location of the circuit file\n",
    "        edit=True, # open the GUI to edit the circuit\n",
    "        plot=True, # plot the circuit after having edited it\n",
    "        print_network=True # print the network\n",
    "       )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All changes made to the circuit are saved automatically to the file ``circuits/basics.txt`` and when we shut down the editor, the variable ``cir`` became a ``Qcircuit`` object, from which further analysis is possible.\n",
    "\n",
    "**Note: by default the junction is parametrized by its josephson inductance**\n",
    "\n",
    "Since we have not specified a value for $L_j$, we have to specify it as a keyword in all subsequent functions. This is the most computationally efficient way to perform a parameter sweep."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hamiltonian, and further analysis with QuTiP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generating a Hamiltonian"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Hamiltonian of the circuit, with the non-linearity of the Josephson junctions\n",
    "Taylor-expanded, is given by\n",
    "\n",
    "$\\hat{H} = \\sum_{m\\in\\text{modes}} \\hbar \\omega_m\\hat{a}_m^\\dagger\\hat{a}_m +\\sum_j\\sum_{2n\\le\\text{taylor}}E_j\\frac{(-1)^{n+1}}{(2n)!}\\left(\\frac{\\phi_{zpf,m,j}}{\\phi_0}(\\hat{a}_m^\\dagger+\\hat{a}_m)\\right)^{2n}$\n",
    "\n",
    "See our technical paper for more details: https://arxiv.org/pdf/1908.10342.pdf\n",
    "\n",
    "In its construction, we have the freedom to choose the set of ``modes`` to include, the order of the Taylor expansion of the junction potential ``taylor``, and the number of excitations of each mode to consider.\n",
    "\n",
    "The code below generates a Hamiltonian and calculates its eigenenergies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:18.257000Z",
     "start_time": "2019-08-22T16:06:14.144000Z"
    }
   },
   "outputs": [],
   "source": [
    "# Compute hamiltonian (for h=1, so all energies are expressed in frequency units, not angular)\n",
    "H = cir.hamiltonian(\n",
    "    modes = [0,1],# Include modes 0 and 1\n",
    "    taylor = 4,# Taylor the Josephson potential to the power 4\n",
    "    excitations = [8,10],# Consider 8 excitations in mode 0, 10 for mode 1\n",
    "    Lj = 8e-9)# set any component values that were not fixed when building the circuit\n",
    "\n",
    "# QuTiP method which return the eigenergies of the system\n",
    "ee = H.eigenenergies()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first transition of the system is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:18.286000Z",
     "start_time": "2019-08-22T16:06:18.269000Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.006 GHz\n"
     ]
    }
   ],
   "source": [
    "first_transition = ee[1]-ee[0] # in units of Hertz\n",
    "# print this frequency in GHz units\n",
    "print(\"%.3f GHz\"%((first_transition)/1e9))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Open-system dynamics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T09:38:44.231400Z",
     "start_time": "2019-05-01T09:38:44.220400Z"
    }
   },
   "source": [
    "A more elaborate use of QuTiP would be to compute the dynamics (for example with qutip.mesolve). The Hamiltonian `H` and collapse operators `c_ops` that one should use are generated with the code below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:18.386000Z",
     "start_time": "2019-08-22T16:06:18.311000Z"
    }
   },
   "outputs": [],
   "source": [
    "# H is the Hamiltonian\n",
    "H,a_m_list = cir.hamiltonian(modes = [0,1],taylor = 4,excitations = [5,5], Lj = 8e-9, \n",
    "    return_ops = True)  # with this, we return the annihilation operators of \n",
    "                        # the different modes in addition to the Hamiltonian\n",
    "    \n",
    "# The Hamiltonian should be in angular frequencies for time-dependant simulations\n",
    "H = 2.*np.pi*H\n",
    "\n",
    "k = cir.loss_rates(Lj = 8e-9) # Calculate loss rates of the different modes\n",
    "\n",
    "# c_ops are the collapse operators \n",
    "# which should be in angular frequencies for time-dependant simulations\n",
    "c_ops = [np.sqrt(2*np.pi*k[0])*a_m_list[0],np.sqrt(2*np.pi*k[1])*a_m_list[1]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating eigenfrequencies, loss-rates, anharmonicities and cross-Kerr couplings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T08:03:15.316400Z",
     "start_time": "2019-05-01T08:03:15.302400Z"
    }
   },
   "source": [
    "QuCAT can also return the parameters of the (already diagonal) Hamiltonian in first-order perturbation theory\n",
    "\n",
    "$\\hat{H} = \\sum_m\\sum_{n\\ne m} (\\hbar\\omega_m-A_m-\\frac{\\chi_{mn}}{2})\\hat{a}_m^\\dagger\\hat{a}_m \n",
    "-\\frac{A_m}{2}\\hat{a}_m^\\dagger\\hat{a}_m^\\dagger\\hat{a}_m\\hat{a}_m -\\chi_{mn}\\hat{a}_m^\\dagger\\hat{a}_m\\hat{a}_n^\\dagger\\hat{a}_n$\n",
    "\n",
    "valid for weak anharmonicity $\\chi_{mn},A_m\\ll \\omega_m$.\n",
    "\n",
    "Here \n",
    "\n",
    " * $\\omega_m$ are the frequencies of the normal modes of the circuit where all junctions have been replaced with inductors characterized by their Josephson inductance\n",
    " \n",
    " * $A_m$ is the anharmonicity of mode $m$, the difference in frequency of the first two transitions of the mode\n",
    " \n",
    " * $\\chi_{mn}$ is the shift in mode $m$ that incurs if an excitation is created in mode $n$ \n",
    "\n",
    "See our technical paper for more details: https://arxiv.org/pdf/1908.10342.pdf\n",
    "\n",
    "These parameters, together with the loss rate of the modes, are calculated with the functions ``eigenfrequencies``, ``loss_rates``, ``anharmonicities`` and ``kerr``, which return the specified quantities for each mode **in units of Hertz**, **ordered with increasing mode frequency**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Eigen-frequencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:18.429000Z",
     "start_time": "2019-08-22T16:06:18.402000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5.00696407e+09, 5.60042136e+09])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cir.eigenfrequencies(Lj=8e-9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This will return a list of the normal modes of the circuit, we can see they are seperated in frequency by 600 MHz, but we still do not which corresponds to the transmon, and which to the resonator.\n",
    "\n",
    "To distinquish the two, we can calculate the anharmonicities of each mode."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Anharmonicity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:18.468000Z",
     "start_time": "2019-08-22T16:06:18.441000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5.82660683e+02, 1.91131054e+08])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cir.anharmonicities(Lj=8e-9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first (lowest frequency) mode, has a very small anharmonicity, whilst the second, has an anharmonicity of 191 MHz. The highest frequency mode thus corresponds to the transmon."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cross-Kerr or dispersive shift"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this regime of far detuning in frequency, the two modes will interact through a cross-Kerr or dispersive shift, which quantifies the amount by which one mode will shift if frequency if the other is populated with an excitation.\n",
    "\n",
    "We can access this by calculating the Kerr parameters ``K``. In this two dimensional array, the components ``K[i,j]`` correspond to the cross-Kerr interaction of mode ``i`` with mode ``j``. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:18.502000Z",
     "start_time": "2019-08-22T16:06:18.476000Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "667.43 kHz\n"
     ]
    }
   ],
   "source": [
    "K = cir.kerr(Lj=8e-9)\n",
    "print(\"%.2f kHz\"%(K[0,1]/1e3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above, we have found that the cross-Kerr interaction between these two modes is of about 667 kHz.\n",
    "\n",
    "This should correspond to $2\\sqrt{A_0A_1}$ where $A_i$ is the anharmonicity of mode $i$. Let's check that:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:18.532000Z",
     "start_time": "2019-08-22T16:06:18.508000Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "667.43 kHz\n"
     ]
    }
   ],
   "source": [
    "A = cir.anharmonicities(Lj=8e-9)\n",
    "print(\"%.2f kHz\"%(2*np.sqrt(A[0]*A[1])/1e3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loss rates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the studied circuit, the only resistor is located in the resonator. We would thus expect the resonator to be more lossy than the transmon."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:18.571000Z",
     "start_time": "2019-08-22T16:06:18.538000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1572104.84520218,    3841.15992345])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cir.loss_rates(Lj=8e-9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All these quantities are always ordered with increasing mode frequency, so the second element of the array corresponds to the loss rate of the transmon mode."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### $T_1$ times"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When converting these rates to $T_1$ times, one should not forget the $2\\pi$ in the conversion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:18.608000Z",
     "start_time": "2019-08-22T16:06:18.589000Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.0123685e-07 4.1434084e-05]\n"
     ]
    }
   ],
   "source": [
    "T_1 = 1/cir.loss_rates(Lj=8e-9)/2/np.pi\n",
    "print(T_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All these relevant parameters (frequency, dissipation, anharmonicity and Kerr parameters) can be returned in this order using a single function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:54.254000Z",
     "start_time": "2019-08-22T16:06:54.214000Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([5.00696407e+09, 5.60042136e+09]),\n",
       " array([1572104.84520218,    3841.15992345]),\n",
       " array([5.82660683e+02, 1.91131054e+08]),\n",
       " array([[5.82660683e+02, 6.67426551e+05],\n",
       "        [6.67426551e+05, 1.91131054e+08]]))"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cir.f_k_A_chi(Lj = 8e-9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the option ``pretty_print = True`` a more readable summary can be printed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:06:57.643000Z",
     "start_time": "2019-08-22T16:06:57.593000Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         mode |       freq.  |       diss.  |       anha.  |\n",
      "            0 |     5.01 GHz |     1.57 MHz |       583 Hz |\n",
      "            1 |      5.6 GHz |     3.84 kHz |      191 MHz |\n",
      "\n",
      "Kerr coefficients (diagonal = Kerr, off-diagonal = cross-Kerr)\n",
      "         mode |         0    |         1    |\n",
      "            0 |       583 Hz |              |\n",
      "            1 |      667 kHz |      191 MHz |\n",
      "\n"
     ]
    }
   ],
   "source": [
    "f,k,A,chi = cir.f_k_A_chi(pretty_print=True,Lj = 8e-9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sweeping a parameter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most computationally expensive part of the \n",
    "analysis is performed upon initializing the circuit. To avoid doing this, \n",
    "we can enter a symbolic value for a component.\n",
    "    \n",
    "In this example, we have provided a label ``Lj`` for the Josephson inductance. \n",
    "Its value has been passed\n",
    "as a keyword argument all function calls (``Lj=8e-9``)\n",
    "but we can also specify an array of values as done below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:07:02.576000Z",
     "start_time": "2019-08-22T16:07:01.330000Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Anaconda3\\lib\\site-packages\\numpy\\core\\numeric.py:538: ComplexWarning: Casting complex values to real discards the imaginary part\n",
      "  return array(a, dtype, copy=False, order=order)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# array of values for the josephson inductance\n",
    "Lj_list = np.linspace(8e-9,12e-9,101)\n",
    "\n",
    "# Eigen-frequencies of the system:\n",
    "freqs = cir.eigenfrequencies(Lj=Lj_list)\n",
    "\n",
    "# plot first mode\n",
    "plt.plot(Lj_list*1e9,freqs[0]/1e9) \n",
    "\n",
    "# plot second mode\n",
    "plt.plot(Lj_list*1e9,freqs[1]/1e9)\n",
    "\n",
    "# Add labels\n",
    "plt.xlabel('L_J (nH)')\n",
    "plt.ylabel('Normal mode frequency (GHz)')\n",
    "\n",
    "# show the figure\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualizing a normal mode"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T15:39:37.981000Z",
     "start_time": "2019-08-22T15:39:37.952000Z"
    }
   },
   "source": [
    "A better physical understanding of the circuit can be obtained by visualizing the flow \n",
    "of current through the circuit components for a given normal mode.\n",
    "\n",
    "This is done through the `show_normal_mode` function as shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:07:04.092000Z",
     "start_time": "2019-08-22T16:07:02.582000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 674.698x304.92 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 674.698x304.92 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cir.show_normal_mode(mode=0,quantity='current', Lj = 10e-9)\n",
    "cir.show_normal_mode(mode=1,quantity='current', Lj = 10e-9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The annotation corresponds to the complex amplitude, or phasor, of current across the component, if the mode was populated with a single photon amplitude coherent state.\n",
    "The absolute value of this annotation thus corresponds to the contribution of a mode to the zero-point fluctuations of the given quantity across the component.\n",
    "The direction of the arrows indicates what direction we take for 0 phase for that component."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see above that the symmetry on each side of the coupling capacitor is changing between the modes, the above is called the anti-symmetric mode, with a voltage build-up on either side of the coupling capacitor leading to a larger current going through it. Mode 1 is the anti-symmetric mode.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Through the keyword `quantity`, one can alternatively plot voltage, flux, or charge."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The values in these annotations can also be accessed programmatically:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-22T16:07:04.121000Z",
     "start_time": "2019-08-22T16:07:04.099000Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1.7816247236867328e-10-1.4226021802836471e-12j)\n"
     ]
    }
   ],
   "source": [
    "print(cir.components['C_c'].zpf(mode = 0, quantity = 'current',Lj = 10e-9))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
