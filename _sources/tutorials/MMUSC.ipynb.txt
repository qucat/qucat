{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-27T13:50:02.314500Z",
     "start_time": "2019-08-27T13:49:58.790500Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from qucat import Network, L,J,C,R\n",
    "from numpy import pi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modelling a distributed multi-mode resonator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this section we use QuCAT to study the convergence of parameters in the first order Hamiltonian \n",
    "\n",
    "$\\hat{H} = \\sum_m\\sum_{n\\ne m} (\\hbar\\omega_m-A_m-\\frac{\\chi_{mn}}{2})\\hat{a}_m^\\dagger\\hat{a}_m \n",
    "-\\frac{A_m}{2}\\hat{a}_m^\\dagger\\hat{a}_m^\\dagger\\hat{a}_m\\hat{a}_m -\\chi_{mn}\\hat{a}_m^\\dagger\\hat{a}_m\\hat{a}_n^\\dagger\\hat{a}_n$\n",
    "\n",
    "of a transmon qubit coupled to a multi-mode resonator. \n",
    "As done experimentally in https://arxiv.org/pdf/1704.06208.pdf and theoretically in https://arxiv.org/pdf/1701.05095.pdf\n",
    "\n",
    "Using a length of coplanar waveguide terminated with engineered boundary conditions is a common way of building a microwave resonator.\n",
    "One implementation is a $\\lambda/4$ resonator terminated on one end by a large shunt capacitor, acting as a near-perfect short circuit for microwaves such that only a small amount of radiation may enter or leave the resonator.\n",
    "The shunt capacitor creates a voltage node, and at the open end the voltage is free to oscillate, and can couple, as shown below to a transmon qubit.\n",
    "\n",
    "![alt text](graphics/MMUSC_circuit.png \"\")\n",
    "\n",
    "*optical micrograph from https://arxiv.org/abs/1704.06208*\n",
    "\n",
    "This resonator hosts a number of normal modes, justifying its lumped element equivalent circuit shown in **(c)**, a series of LC oscillators with increasing resonance frequency.\n",
    "\n",
    "We will use QuCAT to track the evolution of different characteristics of the system as the number of considered resonator modes $N$ increases.\n",
    "\n",
    "We start by defining some constants"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-27T14:14:08.936200Z",
     "start_time": "2019-08-27T14:14:08.910200Z"
    }
   },
   "outputs": [],
   "source": [
    "# fundamental mode frequency of the resonator\n",
    "f0 = 4.603e9\n",
    "w0 = f0*2.*pi\n",
    "# characteristic impedance of the resonator\n",
    "Z0 = 50\n",
    "# Josephson energy (in Hertz)\n",
    "Ej = 18.15e9\n",
    "# Coupling capacitance\n",
    "Cc = 40.3e-15\n",
    "# Capacitance to ground\n",
    "Cj = 5.13e-15\n",
    "\n",
    "# Capacitance of all resonator modes\n",
    "C0 = pi/4/w0/Z0\n",
    "# Inductance of first resonator mode\n",
    "L0 = 4*Z0/pi/w0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we can then generate a list of Qcircuits, each one corresponding to a different number of resonator modes $N$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-27T13:50:20.929000Z",
     "start_time": "2019-08-27T13:50:03.136500Z"
    }
   },
   "outputs": [],
   "source": [
    "# initialize list of Qcircuits for different number of resonator modes\n",
    "qcircuits = []\n",
    "\n",
    "# Maximum number of resonator modes we will be considering\n",
    "N_max = 6\n",
    "\n",
    "\n",
    "for N in range(1,N_max+1):\n",
    "    # Initialize list of components for Transmon and coupling capacitor\n",
    "    netlist = [\n",
    "        J(N+2,1,Ej,use_E=True),\n",
    "        C(N+2,1,Cj),\n",
    "        C(1,2,Cc)]\n",
    "\n",
    "    for m in range(N):\n",
    "        # Nodes of m-th oscillator\n",
    "        node_minus = 2+m\n",
    "        node_plus = (2+m+1)\n",
    "        # Inductance of m-th oscillator\n",
    "        Lm = L0/(2*m+1)**2\n",
    "        # Add oscillator to netlist\n",
    "        netlist = netlist + [\n",
    "            L(node_minus,node_plus,Lm),\n",
    "            C(node_minus,node_plus,C0)]\n",
    "\n",
    "    # Add Qcircuit to our list\n",
    "    qcircuits.append(Network(netlist))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that $N+2$ is the index of the ground node.\n",
    "\n",
    "We can now access some parameters of the system.\n",
    "\n",
    "To get an initial idea of the mode distribution in the circuit, let us display the mode resonance frequencies and anharmonicities of the transmon coupled to 6 resonator modes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-27T13:50:57.953000Z",
     "start_time": "2019-08-27T13:50:57.906000Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         mode |       freq.  |       diss.  |       anha.  |\n",
      "            0 |     4.38 GHz |          0Hz |      196 kHz |\n",
      "            1 |     8.05 GHz |          0Hz |      361 MHz |\n",
      "            2 |       14 GHz |          0Hz |      2.6 MHz |\n",
      "            3 |       23 GHz |          0Hz |      349 kHz |\n",
      "            4 |     32.2 GHz |          0Hz |      134 kHz |\n",
      "            5 |     41.3 GHz |          0Hz |     69.3 kHz |\n",
      "            6 |     50.5 GHz |          0Hz |     39.4 kHz |\n",
      "\n",
      "Kerr coefficients (diagonal = Kerr, off-diagonal = cross-Kerr)\n",
      "         mode |         0    |         1    |         2    |         3    |         4    |         5    |         6    |\n",
      "            0 |      196 kHz |              |              |              |              |              |              |\n",
      "            1 |     16.8 MHz |      361 MHz |              |              |              |              |              |\n",
      "            2 |     1.43 MHz |     61.3 MHz |      2.6 MHz |              |              |              |              |\n",
      "            3 |      523 kHz |     22.4 MHz |      1.9 MHz |      349 kHz |              |              |              |\n",
      "            4 |      325 kHz |     13.9 MHz |     1.18 MHz |      433 kHz |      134 kHz |              |              |\n",
      "            5 |      233 kHz |       10 MHz |      849 kHz |      311 kHz |      193 kHz |     69.3 kHz |              |\n",
      "            6 |      176 kHz |     7.54 MHz |      640 kHz |      234 kHz |      146 kHz |      105 kHz |     39.4 kHz |\n",
      "\n"
     ]
    }
   ],
   "source": [
    "f,k,A,chi = qcircuits[-1].f_k_A_chi(pretty_print=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Mode `1`, is the only one with a significant anharmonicity and is thus the qubit-like mode.\n",
    "A list of this modes frequencies, for varying number of resonator modes is given by"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-23T16:20:53.546900Z",
     "start_time": "2019-08-23T16:20:53.524900Z"
    }
   },
   "outputs": [],
   "source": [
    "transmon_frequencies = [cir.eigenfrequencies()[1] for cir in qcircuits]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and the anharmonicity of the transmon, computed from first order perturbation theory is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-23T16:20:54.521900Z",
     "start_time": "2019-08-23T16:20:53.548900Z"
    }
   },
   "outputs": [],
   "source": [
    "transmon_anharmonicities = [cir.anharmonicities()[1] for cir in qcircuits]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-23T15:26:13.374000Z",
     "start_time": "2019-08-23T15:26:13.343000Z"
    }
   },
   "source": [
    "Finally the Lamb shift, or shift in the transmon frequency resulting from the zero-point fluctuations of the resonator modes, is given, following the equation shown at the top of the page, by the sum of half the cross-Kerr couplings between the transmon mode and the others"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-23T16:20:54.529900Z",
     "start_time": "2019-08-23T16:20:54.523900Z"
    }
   },
   "outputs": [],
   "source": [
    "lamb_shifts = []\n",
    "for cir in qcircuits:\n",
    "    lamb_shift = 0\n",
    "    K = cir.kerr()\n",
    "    N_modes = len(K[0])\n",
    "    for m in range(N_modes):\n",
    "        if m!=1:\n",
    "            lamb_shift = lamb_shift + K[1][m]/2\n",
    "    lamb_shifts.append(lamb_shift)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can plot these parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-08-23T16:20:54.828900Z",
     "start_time": "2019-08-23T16:20:54.531900Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x576 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define plot with 3 subplots\n",
    "fig,ax = plt.subplots(3,1,figsize = (4,8), sharex = True)\n",
    "\n",
    "ax[0].plot(range(1,N_max+1),transmon_frequencies,'o')\n",
    "# plot anharmonicity of the transmon\n",
    "ax[1].plot(range(1,N_max+1),transmon_anharmonicities,'o')\n",
    "# plot Lamb shift of the transmon \n",
    "ax[2].plot(range(1,N_max+1),lamb_shifts,'o')\n",
    "\n",
    "ax[2].set_xlabel(\"Number of modes\")\n",
    "ax[0].set_ylabel(\" Freq (Hz)\")\n",
    "ax[1].set_ylabel(\"Anharm (Hz)\")\n",
    "ax[2].set_ylabel(\"Lamb shift (Hz)\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
